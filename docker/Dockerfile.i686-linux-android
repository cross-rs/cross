FROM ubuntu:24.04 as cross-base
ENV DEBIAN_FRONTEND=noninteractive

COPY common.sh lib.sh /
RUN /common.sh

COPY cmake.sh /
RUN /cmake.sh

COPY xargo.sh /
RUN /xargo.sh

FROM cross-base as build

# We could supposedly directly run i686 binaries like we do for x86_64, but
# doing so generates an assertion failure:
#   ... assertion failed: signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR
#   ... src/libstd/sys/unix/mod.rs
#   fatal runtime error: failed to initiate panic, error 5
#
# Running with qemu works as expected. it also ensures that're we're
# running on a CPU that only supports 32-bit x86 systems.
COPY qemu.sh /
RUN /qemu.sh i386

ARG ANDROID_NDK=r25b
ARG ANDROID_SDK=28
ARG ANDROID_VERSION=9.0.0_r1
ARG ANDROID_SYSTEM_NONE=0
ARG ANDROID_SYSTEM_COMPLETE=0
ARG PYTHON_TMPDIR=/tmp/android

COPY validate-android-args.sh /
RUN /validate-android-args.sh x86

COPY android-ndk.sh /
RUN /android-ndk.sh x86
ENV PATH=$PATH:/android-ndk/bin

COPY android-system.sh /
RUN mkdir -p $PYTHON_TMPDIR
COPY android $PYTHON_TMPDIR
RUN /android-system.sh x86

ENV CROSS_TOOLCHAIN_PREFIX=i686-linux-android-
ENV CROSS_SYSROOT=/android-ndk/sysroot
ENV CROSS_ANDROID_SDK=$ANDROID_SDK
COPY android-symlink.sh /
RUN /android-symlink.sh i386 i686-linux-android

COPY android-runner /
COPY android.cmake /opt/toolchain.cmake

# Libz is distributed in the android ndk, but for some unknown reason it is not
# found in the build process of some crates, so we explicit set the DEP_Z_ROOT
ENV CROSS_TARGET_RUNNER="/android-runner i686"
ENV CARGO_TARGET_I686_LINUX_ANDROID_LINKER="$CROSS_TOOLCHAIN_PREFIX"gcc \
    CARGO_TARGET_I686_LINUX_ANDROID_RUNNER="$CROSS_TARGET_RUNNER" \
    AR_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"ar \
    AS_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"as \
    CC_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"gcc \
    CXX_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"g++ \
    LD_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"ld \
    NM_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"nm \
    OBJCOPY_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"objcopy \
    OBJDUMP_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"objdump \
    RANLIB_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"ranlib \
    READELF_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"readelf \
    SIZE_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"size \
    STRINGS_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"strings \
    STRIP_i686_linux_android="$CROSS_TOOLCHAIN_PREFIX"strip \
    CMAKE_TOOLCHAIN_FILE_i686_linux_android=/opt/toolchain.cmake \
    BINDGEN_EXTRA_CLANG_ARGS_i686_linux_android="--sysroot=$CROSS_SYSROOT" \
    DEP_Z_INCLUDE="$CROSS_SYSROOT/usr/include/" \
    LIBZ_SYS_STATIC=1 \
    RUST_TEST_THREADS=1 \
    HOME=/tmp/ \
    TMPDIR=/tmp/ \
    ANDROID_DATA=/ \
    ANDROID_DNS_MODE=local \
    ANDROID_ROOT=/system \
    CROSS_CMAKE_SYSTEM_NAME=Android \
    CROSS_CMAKE_SYSTEM_PROCESSOR=i686 \
    CROSS_CMAKE_CRT=android \
    CROSS_CMAKE_OBJECT_FLAGS="--target=i686-linux-android -DANDROID -ffunction-sections -fdata-sections -fPIC --target=i686-linux-android"
